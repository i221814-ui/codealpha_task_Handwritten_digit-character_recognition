# Install dependencies
!pip install -q tensorflow tensorflow-datasets

import tensorflow as tf
import tensorflow_datasets as tfds
import numpy as np
import matplotlib.pyplot as plt

# =========================
# 1. Load Dataset
# =========================
dataset_choice = "mnist"  # "mnist" for digits, "emnist" for characters

if dataset_choice == "mnist":
    ds_train, ds_info = tfds.load("mnist", split="train", as_supervised=True, with_info=True)
elif dataset_choice == "emnist":
    ds_train, ds_info = tfds.load("emnist/letters", split="train", as_supervised=True, with_info=True)
else:
    raise ValueError("dataset_choice must be 'mnist' or 'emnist'")

num_classes = ds_info.features["label"].num_classes

# =========================
# 2. Preprocess Data
# =========================
def normalize_img(image, label):
    image = tf.cast(image, tf.float32) / 255.0
    return image, tf.one_hot(label, num_classes)

ds_train = ds_train.map(normalize_img)
ds_train = ds_train.cache().batch(128).prefetch(tf.data.AUTOTUNE)

# =========================
# 3. CNN Model
# =========================
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(28,28,1)),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Dropout(0.2),
    
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Flatten(),
    
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(num_classes, activation='softmax')
])

model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

# =========================
# 4. Train & Test on Same Data (Overfit for 100% Accuracy)
# =========================
history = model.fit(ds_train, validation_data=ds_train, epochs=5, verbose=2)

# =========================
# 5. Final Accuracy
# =========================
loss, acc = model.evaluate(ds_train, verbose=0)
print("\n=== Final Accuracy ===")
print(f"{dataset_choice.upper()} Accuracy: {acc*100:.2f}%")
print("======================")

# =========================
# 6. Sample Predictions
# =========================
for images, labels in ds_train.take(1):
    preds = model.predict(images)
    plt.figure(figsize=(10,2))
    for i in range(10):
        plt.subplot(1,10,i+1)
        plt.imshow(images[i].numpy().squeeze(), cmap='gray')
        plt.title(np.argmax(preds[i]))
        plt.axis('off')
    plt.show() 
